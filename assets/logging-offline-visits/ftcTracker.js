// Generated by CoffeeScript 1.6.3
/*
# logging offline visits across sessions
# for in-house tracking and Google Analytics
# See my blog for more information (Chinese)
# http://ljw.me/2013/07/24/logging-offline-visits.html
# 
# Usage:
#
# var tracker = new FTCTracker(beaconURLPrefix)
# tracker.push(url)
#
# A nice side-effect is that you could use
# `tracker.isAccessible()` to get the latest network status.
# This is more reliable than `navigator.onLine`
*/

var FTCTracker;

FTCTracker = (function() {
  var accessible, getOfflinePageView, getTrackerURL, isBusy, load, log, offlinePageView, prefix, resolve, save, saveOfflinePageView, sendToGA, setAccessible;

  log = [];

  prefix = "";

  isBusy = false;

  accessible = navigator.onLine;

  save = function(key, value) {
    try {
      return localStorage.setItem(key, value);
    } catch (_error) {}
  };

  load = function(key) {
    var e;
    try {
      return localStorage.getItem(key);
    } catch (_error) {
      e = _error;
      return null;
    }
  };

  setAccessible = function(_bool) {
    return accessible = _bool;
  };

  offlinePageView = "offlinePageView";

  getOfflinePageView = function() {
    return load(offlinePageView);
  };

  saveOfflinePageView = function() {
    var saved, unsaved;
    saved = getOfflinePageView();
    unsaved = JSON.stringify(log);
    if (unsaved !== saved) {
      save(offlinePageView, unsaved);
    }
    return isBusy = false;
  };

  getTrackerURL = function(url) {
    return prefix + '&url=' + encodeURIComponent(url) + '&rnd=' + Math.random().toFixed(5);
  };

  sendToGA = function(url) {
    var q;
    if (q = window._gaq) {
      return q.push(['_trackPageview', url]);
    }
  };

  resolve = function() {
    var tracker, url;
    if (!log) {
      return;
    }
    if (!log.length) {
      return;
    }
    if (isBusy) {
      return;
    }
    isBusy = true;
    url = log[0];
    while (!url || url === "undefined" || url === "null") {
      log.shift();
      url = log[0];
    }
    tracker = new Image();
    tracker.onload = function() {
      setAccessible(true);
      sendToGA(url);
      log.shift();
      saveOfflinePageView();
      if (log.length) {
        return resolve();
      }
    };
    tracker.onerror = function() {
      setAccessible(false);
      return saveOfflinePageView();
    };
    return tracker.src = getTrackerURL(url);
  };

  function FTCTracker(beaconURLPrefix) {
    prefix = beaconURLPrefix;
    log = [].concat(JSON.parse(getOfflinePageView()));
  }

  FTCTracker.prototype.isAccessible = function() {
    return accessible;
  };

  FTCTracker.prototype.valueOf = function() {
    return log;
  };

  FTCTracker.prototype.toString = function() {
    return getOfflinePageView();
  };

  FTCTracker.prototype.push = function(url) {
    if (!url) {
      return;
    }
    log.push(url);
    return resolve();
  };

  return FTCTracker;

})();
